import type { NextPage } from "next";
import { useRouter } from "next/router";
import { useEffect } from "react";
import { useAuthState } from "react-firebase-hooks/auth";
import { auth, db } from "../../firebase";
import Head from "next/head";
import {
  activeSidebarItemState,
  alreadyReadListState,
  authState,
  categoriesState,
  postsState,
  subCategoriesState,
} from "../../store";
import { useRecoilState } from "recoil";
import {
  collection,
  onSnapshot,
  orderBy,
  query,
  where,
} from "firebase/firestore";
import { Box, Container } from "@mui/material";
import Link from "next/link";
import AlreadyReadCount from "../components/AlreadyReadCount";

const Home: NextPage = () => {
  const [categories, setCategories]: any = useRecoilState(categoriesState); // カテゴリー一覧
  const [subCategories, setSubCategories]: any =
    useRecoilState(subCategoriesState); // サブカテゴリー一覧
  const [posts, setPosts]: any = useRecoilState(postsState); // 記事一覧
  const [alreadyReadList, setAlreadyReadList]: any =
    useRecoilState(alreadyReadListState); // 記事一覧
  const [activeSidebarItem, setActiveSidebarItem] = useRecoilState(
    activeSidebarItemState
  );

  // カテゴリー一覧を取得
  useEffect(() => {
    const q = query(collection(db, "categories"), orderBy("createdAt", "desc"));
    onSnapshot(q, (querySnapshot) => {
      setCategories(
        querySnapshot.docs.map((doc) => ({
          ...doc.data(),
          id: doc.id,
        }))
      );
    });
  }, [setCategories]);

  // サブカテゴリー一覧を取得
  useEffect(() => {
    onSnapshot(collection(db, "subCategories"), (querySnapshot) => {
      setSubCategories(
        querySnapshot.docs.map((doc) => ({
          ...doc.data(),
          id: doc.id,
        }))
      );
    });
  }, [setSubCategories]);

  // 記事一覧を取得
  useEffect(() => {
    onSnapshot(collection(db, "posts"), (querySnapshot) => {
      setPosts(
        querySnapshot.docs.map((doc) => ({
          ...doc.data(),
          id: doc.id,
        }))
      );
    });
  }, [setPosts]);

  // 既読一覧を取得
  useEffect(() => {
    const q = query(
      collection(db, "alreadyReadList"),
      orderBy("createdAt", "desc")
    );
    onSnapshot(q, (querySnapshot) => {
      setAlreadyReadList(
        querySnapshot.docs.map((doc) => ({
          ...doc.data(),
          id: doc.id,
        }))
      );
    });
  }, [setAlreadyReadList]);

  return (
    <div>
      <Head>
        <title>DAIMARU-HAKUI</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxWidth="md">
        <Box component="h1" mt={6} sx={{ fontSize: "1.2rem" }}>
          新着
        </Box>
        <Box width="100%">
          {posts.length >= 1 ? (
            <Box
              component="ul"
              p={0}
              border="1px solid #e1e1e1"
              borderBottom="none"
              sx={{ backgroundColor: "white" }}
            >
              {posts.map(
                (post: {
                  id: string;
                  title: string;
                  subCategoryId: string;
                }) => (
                  <Link href={`/posts/${post.id}`} key={post.id}>
                    <a>
                      <Box
                        component="li"
                        p={2}
                        display="flex"
                        justifyContent="space-between"
                        borderBottom="1px solid #e1e1e1"
                        sx={{
                          listStyle: "none",
                          "&:hover": {
                            background: "#e4e4e4",
                          },
                        }}
                        onClick={() => setActiveSidebarItem(post.subCategoryId)}
                      >
                        <Box>{post.title}</Box>
                        <AlreadyReadCount postId={post.id} />
                        {/* <Box display="flex">
                          <Box component="span" mr={2} display="flex">
                            <Box mr={1}>既読</Box>
                            {onAlreadyReadCount(post.id)}
                          </Box>
                          <Box component="span" mr={2} display="flex">
                            <Box mr={1}>未読</Box>
                            {17 - onAlreadyReadCount(post.id)}
                          </Box>
                        </Box> */}
                      </Box>
                    </a>
                  </Link>
                )
              )}
            </Box>
          ) : (
            <Box p={6} textAlign="center" fontSize="1.2rem">
              登録された記事がありません。
            </Box>
          )}
        </Box>
      </Container>
    </div>
  );
};

export default Home;
