import type { NextPage } from 'next';
import { useEffect } from 'react';
import { auth, db } from '../../firebase';
import Head from 'next/head';
import {
  alreadyReadListState,
  articlesState,
  authState,
  categoriesState,
  postsState,
} from '../../store';
import { useRecoilState, useRecoilValue } from 'recoil';
import { collection, onSnapshot, orderBy, query } from 'firebase/firestore';
import { Box, Container } from '@mui/material';
import Link from 'next/link';
import AlreadyReadCount from '../components/AlreadyReadCount';

const Home: NextPage = ({ postsApi, categoriesApi }: any) => {
  const currentUser = useRecoilValue(authState);
  const [categories, setCategories]: any = useRecoilState(categoriesState); // カテゴリー一覧
  const [posts, setPosts]: any = useRecoilState(postsState); // 記事一覧
  const [articles, setArticles] = useRecoilState<any>(articlesState);
  const [alreadyReadList, setAlreadyReadList]: any =
    useRecoilState(alreadyReadListState); // 記事一覧

  // 一覧を取得
  useEffect(() => {
    setPosts(postsApi);
    setCategories(categoriesApi);
  }, [postsApi, setPosts, categoriesApi, setCategories]);

  // 既読一覧を取得
  useEffect(() => {
    const q = query(
      collection(db, 'alreadyReadList'),
      orderBy('createdAt', 'desc')
    );
    onSnapshot(q, (querySnapshot) => {
      setAlreadyReadList(
        querySnapshot.docs.map((doc) => ({
          ...doc.data(),
          id: doc.id,
        }))
      );
    });
  }, [setAlreadyReadList]);

  // 既読一覧を取得
  useEffect(() => {
    const q = query(collection(db, 'articles'), orderBy('createdAt', 'desc'));
    onSnapshot(q, (querySnapshot) => {
      setArticles(
        querySnapshot.docs.map((doc) => ({
          ...doc.data(),
          id: doc.id,
        }))
      );
    });
  }, [setArticles]);

  const onUnreadIcon = (postId: string) => {
    const article = articles.find((article: { id: string }) => {
      if (article.id === postId) return article;
    });
    console.log(article);
    if (!article) {
      return (
        <Box
          component='span'
          mr={1}
          p={1}
          borderRadius={1}
          display='inline-block'
          color='white'
          bgcolor='#03a9f4'
        >
          未読
        </Box>
      );
    }
    const result = article.members.includes(currentUser);

    if (!result)
      return (
        <Box
          component='span'
          mr={1}
          p={1}
          borderRadius={1}
          display='inline-block'
          color='white'
          bgcolor='#03a9f4'
        >
          未読
        </Box>
      );
  };

  return (
    <>
      {currentUser && (
        <>
          <Head>
            <title>DAIMARU-HAKUI</title>
            <meta name='description' content='Generated by create next app' />
            <link rel='icon' href='/favicon.ico' />
          </Head>
          <Container maxWidth='md'>
            <Box component='h1' mt={6} sx={{ fontSize: '1.2rem' }}>
              新着
            </Box>
            <Box width='100%'>
              {posts.length >= 1 ? (
                <Box
                  component='ul'
                  p={0}
                  border='1px solid #e1e1e1'
                  borderBottom='none'
                  sx={{ backgroundColor: 'white' }}
                >
                  {posts.map(
                    (post: {
                      id: string;
                      title: string;
                      subCategoryId: string;
                    }) => (
                      <Link href={`/posts/${post.id}`} key={post.id}>
                        <a>
                          <Box
                            component='li'
                            p={2}
                            display='flex'
                            justifyContent='space-between'
                            alignItems='center'
                            borderBottom='1px solid #e1e1e1'
                            sx={{
                              listStyle: 'none',
                              '&:hover': {
                                background: '#e4e4e4',
                              },
                            }}
                          >
                            <Box>
                              {onUnreadIcon(post.id)}

                              {post.title}
                            </Box>
                            <Box>
                              <AlreadyReadCount postId={post.id} />
                            </Box>
                          </Box>
                        </a>
                      </Link>
                    )
                  )}
                </Box>
              ) : (
                <Box p={6} textAlign='center' fontSize='1.2rem'>
                  登録された記事がありません。
                </Box>
              )}
            </Box>
          </Container>
        </>
      )}
    </>
  );
};

export default Home;

export async function getStaticProps() {
  const API_KEY = process.env.NEXT_PUBLIC_API_KEY;
  const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL;
  const option: {} = {
    headers: {
      'X-MICROCMS-API-KEY': API_KEY,
    },
  };
  const [resPosts, resCategories] = await Promise.all([
    fetch(BASE_URL + 'posts', option),
    fetch(BASE_URL + 'categories', option),
  ]);

  const jsonPosts = await resPosts.json();
  const postsApi = await jsonPosts.contents;

  const jsonCategories = await resCategories.json();
  const categoriesApi = await jsonCategories.contents;

  return {
    props: {
      postsApi,
      categoriesApi,
    },
  };
}
